let students = [];
let lang = "vi";
const i18n = {
  vi: {
    detailTitle: "Th√¥ng tin h·ªçc sinh",
    export: "Xu·∫•t PDF",
    close: "ƒê√≥ng",
    chartSchool: "ƒêi·ªÉm TB theo tr∆∞·ªùng",
    chartHocLuc: "Ph√¢n lo·∫°i h·ªçc l·ª±c",
    chartLop: "ƒêi·ªÉm TB theo l·ªõp",
    chartMon: "ƒêi·ªÉm TB theo m√¥n"
  },
  en: {
    detailTitle: "Student Information",
    export: "Export PDF",
    close: "Close",
    chartSchool: "Average score by school",
    chartHocLuc: "Academic classification",
    chartLop: "Average score by class",
    chartMon: "Average score by subject"
  }
};

function setLang(l) {
  lang = l;
  document.querySelector(".modal-title").innerText = i18n[lang].detailTitle;
  document.querySelector("#detailModal .btn-outline-primary").innerText = "üìÑ " + i18n[lang].export;
  document.querySelector("#detailModal .btn-secondary").innerText = i18n[lang].close;
  document.querySelector("h5.text-center.mb-3").innerText = "üìä " + i18n[lang].chartSchool;
  document.querySelectorAll("h5.text-center.mb-3")[1].innerText = "üìä " + i18n[lang].chartHocLuc;
  document.querySelectorAll("h5.text-center.mb-3")[2].innerText = "üìò " + i18n[lang].chartLop;
  document.querySelectorAll("h5.text-center.mb-3")[3].innerText = "üìö " + i18n[lang].chartMon;
}

document.addEventListener("DOMContentLoaded", () => {
  const script = document.createElement("script");
  script.src = "data.js";
  script.onload = () => {
    students = studentsData;
    populateFilters();
    renderTable();
  };
  document.head.appendChild(script);
});

function populateFilters() {
  const schools = [...new Set(students.map(s => s["Tr∆∞·ªùng"]))];
  const classes = [...new Set(students.map(s => s["L·ªõp"]))];
  const selSchool = document.getElementById("filterSchool");
  const selClass = document.getElementById("filterClass");
  schools.forEach(s => selSchool.innerHTML += `<option value="${s}">${s}</option>`);
  classes.forEach(c => selClass.innerHTML += `<option value="${c}">${c}</option>`);
}

function normalize(str) {
  return str.normalize("NFD").replace(/[ÃÄ-ÕØ]/g, "").toLowerCase();
}

function renderTable() {
  const kw = normalize(document.getElementById("searchInput").value.trim());
  const school = document.getElementById("filterSchool").value;
  const lop = document.getElementById("filterClass").value;
  const result = document.getElementById("filterResult").value;
  const min = parseFloat(document.getElementById("filterMin").value) || 0;
  const useCard = document.getElementById("toggleCard").checked;
  const table = document.getElementById("tableContainer");
  const card = document.getElementById("cardContainer");
  const body = document.getElementById("tableBody");
  body.innerHTML = "";
  card.innerHTML = "";

  const filtered = students.filter(s =>
    (normalize(s["H·ªç v√† t√™n"]).includes(kw) || s["SBD"].toString().includes(kw)) &&
    (school === "" || s["Tr∆∞·ªùng"] === school) &&
    (lop === "" || s["L·ªõp"] === lop) &&
    (result === "" || s["K·∫øt qu·∫£"] === result) &&
    s["T·ªïng ƒëi·ªÉm"] >= min
  );

  table.classList.toggle("d-none", useCard);
  card.classList.toggle("d-none", !useCard);

  if (filtered.length === 0) {
    document.getElementById("noResult").classList.remove("d-none");
    return;
  } else document.getElementById("noResult").classList.add("d-none");

  filtered.forEach(s => {
    if (useCard) {
      const div = document.createElement("div");
      div.className = "col-md-4";
      div.innerHTML = `
        <div class="card-student ${s["K·∫øt qu·∫£"] === "Tr∆∞·ª£t" ? "highlight-fail" : ""}">
          <h5>${s["H·ªç v√† t√™n"]} (${s["SBD"]})</h5>
          <p><strong>Tr∆∞·ªùng:</strong> ${s["Tr∆∞·ªùng"]}</p>
          <p><strong>L·ªõp:</strong> ${s["L·ªõp"]}</p>
          <p><strong>ƒêi·ªÉm:</strong> ${s["T·ªïng ƒëi·ªÉm"]} ‚Äì ${s["K·∫øt qu·∫£"]}</p>
          <button class="btn btn-sm btn-outline-primary" onclick='showDetail(${JSON.stringify(s)})'>Chi ti·∫øt</button>
        </div>`;
      card.appendChild(div);
    } else {
      const row = document.createElement("tr");
      if (s["K·∫øt qu·∫£"] === "Tr∆∞·ª£t") row.classList.add("highlight-fail");
      row.innerHTML = `
        <td>${s["SBD"]}</td><td>${s["H·ªç v√† t√™n"]}</td><td>${s["Tr∆∞·ªùng"]}</td><td>${s["L·ªõp"]}</td>
        <td>${s["Ng·ªØ vƒÉn"]}</td><td>${s["To√°n"]}</td><td>${s["Ti·∫øng Anh"]}</td>
        <td>${s["UT"]}</td><td>${s["KK"]}</td><td>${s["T·ªïng ƒëi·ªÉm"]}</td>
        <td>${s["K·∫øt qu·∫£"] === "ƒê·∫°t" ? "‚úÖ" : "‚ö†Ô∏è"}</td>`;
      row.onclick = () => showDetail(s);
      body.appendChild(row);
    }
  });

  drawCharts(filtered);
}

function startApp() {
  document.getElementById("landingPage").classList.add("d-none");
  document.getElementById("mainApp").classList.remove("d-none");
}

function showDetail(s) {
  const b = document.getElementById("modalBody");
  b.innerHTML = `
    <p><strong>H·ªç t√™n:</strong> ${s["H·ªç v√† t√™n"]}</p>
    <p><strong>SBD:</strong> ${s["SBD"]}</p>
    <p><strong>Tr∆∞·ªùng:</strong> ${s["Tr∆∞·ªùng"]}</p>
    <p><strong>L·ªõp:</strong> ${s["L·ªõp"]}</p>
    <p><strong>VƒÉn:</strong> ${s["Ng·ªØ vƒÉn"]}, <strong>To√°n:</strong> ${s["To√°n"]}, <strong>Anh:</strong> ${s["Ti·∫øng Anh"]}</p>
    <p><strong>UT:</strong> ${s["UT"]}, <strong>KK:</strong> ${s["KK"]}</p>
    <p><strong>T·ªïng ƒëi·ªÉm:</strong> ${s["T·ªïng ƒëi·ªÉm"]} ‚Äì <strong>${s["K·∫øt qu·∫£"]}</strong></p>`;
  window.selectedStudent = s;
  new bootstrap.Modal(document.getElementById("detailModal")).show();
}

function exportPDF() {
  const { jsPDF } = window.jspdf;
  const s = window.selectedStudent;
  const doc = new jsPDF();
  doc.setFontSize(12);
  doc.text("PHI·∫æU TRA C·ª®U K·∫æT QU·∫¢ TUY·ªÇN SINH", 20, 20);
  doc.text(`H·ªç t√™n: ${s["H·ªç v√† t√™n"]}`, 20, 30);
  doc.text(`SBD: ${s["SBD"]} | Tr∆∞·ªùng: ${s["Tr∆∞·ªùng"]} | L·ªõp: ${s["L·ªõp"]}`, 20, 38);
  doc.text(`Ng·ªØ vƒÉn: ${s["Ng·ªØ vƒÉn"]} | To√°n: ${s["To√°n"]} | Anh: ${s["Ti·∫øng Anh"]}`, 20, 46);
  doc.text(`∆Øu ti√™n: ${s["UT"]} | KK: ${s["KK"]}`, 20, 54);
  doc.text(`T·ªïng ƒëi·ªÉm: ${s["T·ªïng ƒëi·ªÉm"]} ‚Äì ${s["K·∫øt qu·∫£"]}`, 20, 62);
  doc.save(`${s["SBD"]}_${s["H·ªç v√† t√™n"]}.pdf`);
}

function drawCharts(data) {
  const groupAvg = (byKey, field) => {
    const map = {};
    data.forEach(s => {
      const k = s[byKey];
      if (!map[k]) map[k] = { sum: 0, count: 0 };
      map[k].sum += s[field];
      map[k].count++;
    });
    return Object.keys(map).map(k => ({ key: k, avg: (map[k].sum / map[k].count).toFixed(2) }));
  };

  const hocLuc = { "ƒê·∫°t": 0, "Tr∆∞·ª£t": 0 };
  data.forEach(s => {
    hocLuc[s["K·∫øt qu·∫£"]]++;
  });

  const ctxHL = document.getElementById("chartHocLuc").getContext("2d");
  const ctxLop = document.getElementById("chartLop").getContext("2d");
  const ctxMon = document.getElementById("chartMon").getContext("2d");

  if (window.hlChart) window.hlChart.destroy();
  if (window.lopChart) window.lopChart.destroy();
  if (window.monChart) window.monChart.destroy();

  window.hlChart = new Chart(ctxHL, {
    type: "pie",
    data: {
      labels: Object.keys(hocLuc),
      datasets: [{ data: Object.values(hocLuc), backgroundColor: ["#0d6efd", "#198754", "#ffc107", "#dc3545"] }]
    }
  });

  const lopStats = groupAvg("L·ªõp", "T·ªïng ƒëi·ªÉm");
  window.lopChart = new Chart(ctxLop, {
    type: "bar",
    data: {
      labels: lopStats.map(i => i.key),
      datasets: [{ label: "TB ƒëi·ªÉm", data: lopStats.map(i => i.avg), backgroundColor: "#0dcaf0" }]
    }
  });

  const monAvg = ["Ng·ªØ vƒÉn", "To√°n", "Ti·∫øng Anh"].map(mon => {
    const sum = data.reduce((acc, s) => acc + s[mon], 0);
    return (sum / data.length).toFixed(2);
  });

  window.monChart = new Chart(ctxMon, {
    type: "bar",
    data: {
      labels: ["Ng·ªØ vƒÉn", "To√°n", "Ti·∫øng Anh"],
      datasets: [{ label: "TB m√¥n", data: monAvg, backgroundColor: "#20c997" }]
    }
  });
}